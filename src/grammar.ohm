Storymatic {
  Script = TopLevelStatement*

  WrappedStatementBlock = "{" Statement* "}" | "⇨" Statement* "⇦"
  WrappedScriptBlock = "{" TopLevelStatement* "}" | "⇨" TopLevelStatement* "⇦"

  SingleStatementBlock<prefix>
    = WrappedStatementBlock
    | prefix #space Statement -- single_statement

  UnprefixedSingleStatementBlock
    = WrappedStatementBlock
    | Statement -- single_statement

  IfStatement
    = ("if" | "unless") #postWord Expression SingleStatementBlock<"then">
      ("else" #postWord (UnprefixedSingleStatementBlock | IfStatement))?

  SwitchStatement
    = "switch" #space Expression "{" CaseStatement* DefaultStatement? "}"
    | "switch" #space Expression "⇨" CaseStatement* DefaultStatement? "⇦"

  CaseClause = "case" #space NonemptyListOf<Expression, ","> CaseTerminator
  CaseStatement = CaseClause+ UnprefixedSingleStatementBlock
  DefaultStatement = "default" #space UnprefixedSingleStatementBlock

  CaseTerminator
    = #colonTerminator -- terminator
    | &("{" | "⇨") -- final

  TryStatement = "try" #space UnprefixedSingleStatementBlock CatchStatement? FinallyStatement?
  CatchStatement = "catch" #(space+ identifier)? WrappedStatementBlock?
  FinallyStatement = "finally" #space UnprefixedSingleStatementBlock?

  EnumStatement = ("export" #space)? "enum" #space identifier "{" EnumMember* "}"

  EnumMember
    = (word | string_non_interpolatable) #expressionTerminator -- auto_assign
    | (word | string_non_interpolatable) "=" Expression #expressionTerminator -- assigned

  TopLevelStatement
    = Statement
    | "import" #postWord importLocation #statementTerminator -- empty_import
    | "import" (#space "type")? "{" NonemptyListOf<Importable, ","> "}" "from" #postWord importLocation #statementTerminator -- import
    | "import" "*" "as" #postWord identifier "from" #postWord importLocation #statementTerminator -- import_all
    | "import" (#space "type")? #postWord identifier #postWord "from" #postWord importLocation #statementTerminator -- import_default
    | "export" #statementTerminator -- empty_export
    | "export" (#space "type")? "{" NonemptyListOf<Exportable, ","> "}" "from" #postWord importLocation #statementTerminator -- export_from
    | "export" "*" "from" #postWord importLocation #statementTerminator -- export_all_from
    | "export" (#space "type")? "{" NonemptyListOf<Exportable, ","> "}" #statementTerminator -- export
    | "export" #postWord "default" #postWord Expression #statementTerminator -- export_default
    | ExportedVariableAssignment #statementTerminator -- export_variable

  Statement
    = IfStatement
    | TryStatement
    | ClassDeclaration
    | TypeDeclaration
    | InterfaceDeclaration
    | NamespaceDeclaration
    | SwitchStatement
    | EnumStatement
    | ("while" | "until") #postWord Expression SingleStatementBlock<"then"> -- while
    | "for" #postWord ("await" #postWord)? (Assignable "of" #postWord)? Expression SingleStatementBlock<"then"> -- for
    | "rescope" #space NonemptyListOf<Rescopable, ","> #statementTerminator -- rescope
    | "rescope" #space VariableAssignment #statementTerminator -- rescope_assign
    | TypedVariableAssignment -- typed_assignment
    | ~("{" "}") TopLevelIfExp #statementTerminator -- expression

  Rescopable
    = identifier ":" Type -- with_type
    | identifier -- identifier

  ClassDeclaration
    = ("export" #space)? "class" #space identifier GenericTypeParameterList?
      (#space "extends" #space (Extendable | Expression))?
      (#space "implements" #space NonemptyListOf<Implementable, ",">)?
      "{" ClassElement* "}"

  ClassElement
    = Method<""> -- method
    | Method<"@"> -- static_method
    | ClassProperty<""> #statementTerminator -- property
    | ClassProperty<"@"> #statementTerminator -- static_property
    | IndexSignatureType<""> #statementTerminator -- index_signature
    | IndexSignatureType<"@"> #statementTerminator -- static_index_signature

  importLocation
    = (~(space | "{" | "\\" | "\"" | "\'" | statementTerminator) any)+ &statementTerminator -- filename
    | string_non_interpolatable

  Importable = ("type" #space)? word (#space "as" #space word)?
  Exportable = ("type" #space)? word (#space "as" #space word)?

  statementTerminator
    = spaces ";" -- semicolon
    | terminator

  expressionTerminator
    = spaces "," -- comma
    | terminator

  typeTerminator
    = spaces "," -- comma
    | spaces ";" -- semicolon
    | terminator

  colonTerminator
    = spaces ":" -- colon
    | terminator

  terminator
    = spaces &"}"
    | spaces &"⇦"
    | spaces &reserved_block
    | spaces end
    | (~"\n" space)* "\n"+

  TopLevelIfExp
    = TopLevelWhileExp #(~lineBreak) ("if" | "unless") #postWord Expression -- if
    | TopLevelWhileExp

  TopLevelWhileExp
    = TopLevelForExp #(~lineBreak) ("while" | "until") #postWord Expression
      ("when" #postWord Expression)? -- while
    | TopLevelForExp

  TopLevelForExp
    = TopLevelExp #(~lineBreak) "for" #postWord ("await" #postWord)? (Assignable "of" #postWord)? Expression  
      ("when" #postWord Expression)? -- for
    | TopLevelExp

  TopLevelExp
    = "break" -- break
    | "continue" -- continue
    | "return" (#postWord AssignmentExp)? -- return
    | "throw" #postWord AssignmentExp -- throw
    | Expression -- expression

  Expression = IfExp
  NonLoopExpression = AssignmentExp

  LiteralExp
    = Function
    | JSXElement
    | "(" Expression ")" -- parenthesized
    | "[" ListOf<ArrayEntry, #expressionTerminator> ","? "]" -- array
    | "{" ListOf<ObjectEntry, #expressionTerminator> ","? "}" -- object
    | "@" ~(id_continue | "[" | ".") -- self
    | "%" -- topic_token
    | "with" #space Expression SingleStatementBlock<"then"> -- with
    | "do" Expression -- do
    | InlineClassDeclaration
    | decimalNumber
    | unitNumber
    | hexNumber
    | bigint
    | identifier
    | Property
    | undefined
    | boolean
    | string
    | null
    | NonemptyListOf<ObjectEntry_implied, ","> -- object_implied
    | Statement -- statement

  InlineClassDeclaration
    = "class" GenericTypeParameterList?
      (#space "extends" #space (Extendable | Expression))?
      (#space "implements" #space NonemptyListOf<Implementable, ",">)?
      "{" ClassElement* "}"

  ArrayEntry
    = Expression
    | "..." Expression -- spread_operator

  Function
    = (GenericTypeParameterList? "(" ParameterList? ")" (":" FunctionReturnType)?)? ("->" | "=>") FunctionBody

  Method<prefix>
    = PrivacyLevel prefix MethodName "?"? Function

  ClassProperty<prefix>
    = PrivacyLevel ("readonly" #postWord)? prefix MethodName ("?" | "!")? (":" Type)? ("=" Expression)?

  PrivacyLevel
    = "public" #postWord -- public
    | "protected" #postWord -- protected
    | "private" #postWord -- private
    | -- none

  FunctionBody
    = Expression -- expression
    | WrappedStatementBlock

  MethodName
    = word -- identifier
    | string -- computed_string_key
    | decimalNumber -- numerical_key
    | "[" Expression "]" -- computed_key

  ObjectEntry
    = MethodName Function -- object_method
    | MethodName ":" Expression -- key_value
    | "..." Expression -- spread_operator
    | identifier -- restructure

  ObjectEntry_implied = MethodName ":" NonLoopExpression

  MemberAccessExp
    = MemberAccessExp GenericTypeArgumentList "(" ArgumentList ")" -- function_call
    | MemberAccessExp "?" GenericTypeArgumentList "(" ArgumentList ")" -- optional_chaining_function_call
    | MemberAccessExp #(whitespace ~("\n" | "(" | "[" | "{" | "<" | line_comment)) ImpliedCallArgumentList -- implied_call
    | MemberAccessExpNonCall<MemberAccessExp>

  MemberAccessExpNonCall<Child>
    = Child "." word -- member_access
    | Child "?." word -- optional_chaining_member_access
    | Child "?"? "[" Expression "]" -- computed_member_access
    | Child "?"? "[" Expression? ("..." | "..") Expression? "]" -- array_slice
    | ~("\"" | "'") Child #string -- tagged_template_literal
    | Child "!" ~"=" -- non_null_assertion
    | Child "as" #postWord Type -- as_expression
    | "new" #space NCMemberAccessExp GenericTypeArgumentList "(" ArgumentList ")" -- class_creation_symbolic
    | "new" #space NCMemberAccessExp #(whitespace ~("\n" | "(" | "[" | "{" | "<" | line_comment)) ImpliedCallArgumentList -- class_creation_implied
    | "new" #space NCMemberAccessExp ~(NonemptyGenericTypeArgumentList | "(") -- class_creation_no_args
    | LiteralExp

  NCMemberAccessExp = MemberAccessExpNonCall<NCMemberAccessExp>

  ArgumentList = ListOf<Argument<Expression>, #expressionTerminator>
  ImpliedCallArgumentList = NonemptyListOf<Argument<NonLoopExpression>, ",">

  Argument<Expr>
    = Expr
    | "..." Expr -- spread_operator

  Parameter
    = Assignable (":" Type)? "=" Expression -- initializer
    | Assignable "?"? ":" Type -- type
    | Assignable -- assignable

  RestParameter
    = "..." Assignable ":" Type -- with_type
    | "..." Assignable -- without_type

  ParameterList
    = NonemptyListOf<Parameter, #expressionTerminator> (#expressionTerminator RestParameter)? -- params
    | RestParameter -- rest_params

  PostfixExp
    = (Accessor | identifier) #(~space) "++" -- increment
    | (Accessor | identifier) #(~space) "--" -- decrement
    | MemberAccessExp

  NotExp
    = "!" NotExp -- logical_not_symbolic
    | "not" #space NotExp -- logical_not_worded
    | "type" "of" #space NotExp -- typeof
    | "await" #space NotExp -- await
    | "++" #(~(space)) (Accessor | identifier) -- prefix_increment
    | "--" #(~(space)) (Accessor | identifier) -- prefix_decrement
    | "+" #(~(space | digit)) NotExp -- unary_plus
    | "-" #(~(space | digit)) NotExp -- unary_minus
    | PostfixExp

  ExpExp
    = NotExp "^" ExpExp -- exponentiate
    | NotExp

  MulExp
    = MulExp "*" ExpExp -- multiplication
    | MulExp "/" ExpExp -- division
    | MulExp "%" ExpExp -- modulus
    | ExpExp

  AddExp
    = AddExp "+" MulExp -- addition
    | AddExp "-" MulExp -- subtraction
    | MulExp

  BitwiseExp
    = BitwiseExp "<<" AddExp -- left_shift
    | BitwiseExp ">>" AddExp -- right_shift
    | BitwiseExp ">>>" AddExp -- unsigned_right_shift
    | AddExp

  CompareExp = BitwiseExp (comparisonOperator BitwiseExp)*

  comparisonOperator
    = ("==" | "is" ~("a" "n"? ~id_continue)) -- equal_to
    | ("!=" | "isnt" ~("a" "n"? ~id_continue)) -- not_equal_to
    | "<" -- less_than
    | ">" -- greater_than
    | "<=" -- less_than_equal
    | ">=" -- greater_than_equal
    | "in" postWord -- in
    | "instanceof" -- instanceof

  LogicalAndExp
    = LogicalAndExp #(spaces "&&" spaces | space+ "and" space+) CompareExp -- logical_and
    | CompareExp

  LogicalOrExp
    = LogicalOrExp #(spaces "||" spaces | space+ "or" space+) LogicalAndExp -- logical_or
    | LogicalOrExp "??" LogicalAndExp -- logical_nullish_coalescing
    | LogicalAndExp

  TernaryExp
    = ("if" | "unless") #postWord TernaryExp "then" #postWord TernaryExp "else" #postWord TernaryExp -- if_then_else
    | LogicalOrExp "?" TernaryExp ":" TernaryExp -- symbolic
    | LogicalOrExp

  postWord = space* ~id_continue | space+
  lineBreak = whitespace? "\n"

  PipeExp
    = (TernaryExp "|>")+ TernaryExp -- pipe
    | TernaryExp

  AssignmentExp
    = AssignableOrAccessor "=" AssignmentExp -- assignment
    | (Accessor | identifier) "[" Expression? ("..." | "..") Expression? "]" "=" AssignmentExp -- splice
    | (Accessor | identifier) ("+=" | "-=" | "*=" | "/=" | "%=" | "^=" | "&&=" | "||=" | "??=" | "and=" | "or=" | "<<=" | ">>=" | ">>>=") AssignmentExp -- update_assignment
    | "yield" #space "from" #postWord AssignmentExp -- yield_from
    | "yield" #space AssignmentExp? -- yield
    | PipeExp

  ForExp
    = AssignmentExp #(~lineBreak) "for" #postWord ("await" #postWord)? (Assignable "of" #postWord)? ForExp 
      ("when" #postWord Expression)? -- for
    | "print" #whitespace #(~"\n") NonemptyListOf<AssignmentExp, ","> -- print
    | AssignmentExp

  WhileExp
    = ForExp #(~lineBreak) ("while" | "until") #postWord WhileExp ("when" #postWord Expression)? -- while
    | ForExp

  IfExp
    = WhileExp #(~lineBreak) ("if" | "unless") #postWord IfExp -- if
    | WhileExp

  VariableAssignment = Assignable (":" Type)? "=" Expression
  ExportedVariableAssignment = "export" #space Assignable (":" Type)? "=" Expression
  TypedVariableAssignment = Assignable ":" Type "=" Expression

  AssignableOrAccessor = Accessor | Assignable ~("." | "[")

  AssignableWithDefault
    = Assignable "=" Expression -- with_default
    | Assignable

  AssignableKeyWithRewrite
    = MethodName ":" AssignableWithDefault -- rewrite
    | AssignableWithDefault

  Assignable
    = identifier -- identifier
    | "[" ListOf<AssignableWithDefault, #expressionTerminator>
      (#expressionTerminator "..." Assignable)? ","? "]" -- array
    | "{" ListOf<AssignableKeyWithRewrite, #expressionTerminator>
      (#expressionTerminator "..." Assignable)? ","? "}" -- object

  Accessor
    = (identifier | Property) AccessorAddon+
    | Property AccessorAddon*

  AccessorAddon
    = "." word -- member_access
    | "[" Expression "]" -- computed_member_access

  whitespace = (~("\n" | line_comment | block_comment) space)+

  sign = ("+" | "-")?
  number = digit+ ("_" digit+)*
  fullNumber = sign number ("." number)? (("e" | "E") sign number)?
  unitNumber = ~"0x" fullNumber ~("n" ~id_continue | "_") identifier
  decimalNumber = ~"0x" fullNumber ~char
  hexNumber = sign "0x" hexDigit+ ("_" hexDigit+)*
  bigint = ~"0x" sign number "n"

  boolean = "true" | "false" | "yes" | "no"
  null = "null"
  undefined = "undefined"

  id_continue = alnum | "_"

  string_bit<delimeter>
    = ~("\\" | "#{" | delimeter) any -- character
    | "\\" ~("b" | "f" | "n" | "r" | "t" | "u" | "v" | "x" | "0") any -- escape
    | "\\" ("b" | "f" | "n" | "r" | "t" | "v" | ("0" ~digit)) -- escape_sequence
    | "\\x" hexDigit hexDigit -- hex_sequence
    | "\\u" hexDigit hexDigit hexDigit hexDigit -- unicode_sequence
    | "\\u{" hexDigit+ "}" -- unicode_code_point_sequence

  string_interpolatable_head<delimeter> = string_bit<delimeter>*

  string_interpolatable_span<delimeter, interpolated>
    = "#{" interpolated "}" string_bit<delimeter>* &(delimeter?)

  string_interpolatable<delimeter, interpolated>
    = delimeter string_interpolatable_head<delimeter>
      "" string_interpolatable_span<delimeter, interpolated>* delimeter

  string_full<delimeter> = delimeter string_bit<delimeter>* delimeter

  string_non_interpolatable
    = string_full<"\"\"\"">
    | string_full<"'''">
    | string_full<"\"">
    | string_full<"'">

  string
    = string_interpolatable<"\"\"\"", applySyntactic<Expression>>
    | string_interpolatable<"'''", applySyntactic<Expression>>
    | string_interpolatable<"\"", applySyntactic<Expression>>
    | string_interpolatable<"'", applySyntactic<Expression>>

  string_type
    = string_interpolatable<"\"\"\"", applySyntactic<Type>>
    | string_interpolatable<"'''", applySyntactic<Type>>
    | string_interpolatable<"\"", applySyntactic<Type>>
    | string_interpolatable<"'", applySyntactic<Type>>

  reserved_block = ("if" | "else" | "then" | "print" | "throw" | "for" | "while" | "until" | "unless" | "do" ~"wn" | "repeat" | "return" | "break" | "continue" | "fn" | "import" | "export" | "class" | "try" | "catch" | "finally" | "switch" | "case" | "default" | "rescope" | "down" | "type" | "interface" | "namespace" | "with" | "when") ~id_continue
  reserved_operators = ("and" | "or" | "not" | "is" ~"nt" | "isnt") ~id_continue
  reserved_inline = ("new" | "in" | "type" ~"of" | "of" | "from" | "typeof" | "as" | "extends" | "await" | "readonly" | "infer") ~id_continue
  reserved_primitive = ("true" | "false" | "yes" | "no" | "null" | "undefined") ~id_continue

  // `super` and `this` are omitted because they are valid names and used often.
  reserved_javascript = ("break" | "case" | "catch" | "class" | "const" | "continue" | "debugger" | "default" | "delete" | "do" | "else" | "enum" | "export" | "extends" | "false" | "finally" | "for" | "function" | "if" | "import" | "in" ~"stanceof" | "instanceof" | "new" | "null" | "return" | /* "super" | */ "switch" | /* "this" | */ "throw" | "true" | "try" | "typeof" | "var" | "void" | "while" | "with" | "implements" | "interface" | "let" | "package" | "private" | "protected" | "public" | "static" | "yield") ~id_continue
  reserved = reserved_block | reserved_operators | reserved_inline | reserved_primitive | reserved_javascript

  char = letter | "_"
  word = char+ (number char*)*

  identifier
    = "~" ~reserved_javascript word -- escape
    | ~reserved word

  Property
    = "@" #word -- identifier
    | "@" #"[" Expression "]" -- computed

  space += block_comment | line_comment
  block_comment = "/*" (~"*/" any)* "*/"
  line_comment = "#" (~"\n" any)*

  JSXElement
    = "<" #jsxTagName GenericTypeArgumentList JSXAttribute* ">" JSXChild* "</" #jsxTagName ">" -- open_close
    | "<" #jsxTagName GenericTypeArgumentList JSXAttribute* "/" ">" -- self_closing

  jsx_string = (~("<" | "{") any)+

  JSXChild
    = "{" "..."? Expression "}" -- interpolation
    | JSXElement
    | jsx_string

  JSXAttribute
    = JSXAttributeKey ~"=" -- value_true
    | JSXAttributeKey "=" string -- value_computed_string
    | JSXAttributeKey "=" "{" Expression "}" -- value_expression
    | "{" "..." Expression "}" -- spread_attributes

  JSXAttributeKey = word

  jsxTagName
    = jsxTagName "." word -- property_access
    | word -- standard

  Type = IfType
  NonLoopType = MappedType

  FunctionReturnType
    = ("asserts" #space)? identifier "is" #postWord NonLoopType -- predicate
    | NonLoopType

  PrimitiveType
    = "string" | "number" | "boolean" | "true" | "false" | "yes" | "no" | "bigint"
    | "symbol" | "object" | "null" | "undefined" | "void" | "any" | "unknown" | "this"

  Implementable
    = identifier ("." word)* GenericTypeArgumentList &("," | "implements" | "{")

  Extendable
    = identifier ("." word)* NonemptyGenericTypeArgumentList &("," | "implements" | "{")

  QualifiedName = identifier ("." word)*

  LiteralType
    = PrimitiveType ~(id_continue | ".")
    | string_type
    | decimalNumber
    | bigint
    | FunctionType
    | "infer" #space identifier (":" #space Type)? -- infer
    | "typeof" #space QualifiedName -- typeof
    | "new" FunctionType -- construct
    | QualifiedName ~"<"
    | QualifiedName NonemptyGenericTypeArgumentList -- type_args
    | "(" Type ")" -- parenthesized

  MemberAccessType
    = MemberAccessType "[" Type "]" -- member_access
    | MemberAccessType "[" "]" -- array
    | "[" ListOf<NamedTupleElement, #expressionTerminator> ","? "]" -- named_tuple
    | "[" ListOf<TupleElement, #expressionTerminator> ","? "]" -- tuple
    | "{" ListOf<TypeObjectEntry, #typeTerminator> ("," | ";")? "}" -- object
    | NonemptyListOf<TypeObjectEntry_key_value, ("," | ";")> -- object_implied
    | "readonly" ~(#id_continue) MemberAccessType -- readonly
    | "keyof" ~(#id_continue) MemberAccessType -- keyof
    | LiteralType

  NamedTupleElement
    = identifier "?"? ":" Type -- name_value
    | "..." identifier ":" Type -- spread_operator

  TupleElement
    = Type "?"? -- value
    | "..." Type -- spread_operator

  TypeObjectKey
    = word -- identifier
    | string_non_interpolatable -- string
    | decimalNumber -- numerical_key
    | "[" Accessor "]" -- computed_accessor

  TypeObjectEntry
    = ("readonly" #space)? TypeObjectKey "?"? ":" Type -- key_value
    | "new" FunctionType -- construct_signature
    | FunctionType -- call_signature
    | ~("new" ~"?") TypeObjectKey "?"? FunctionType -- method
    | IndexSignatureType<"">

  TypeObjectEntry_implied = ("readonly" #space)? TypeObjectEntry "?"? ":" NonLoopType

  FunctionType = (GenericTypeParameterList? "(" ParameterList? ")")? "->" Type

  IntersectionType = NonemptyListOf<MemberAccessType, "&">
  UnionType = NonemptyListOf<IntersectionType, "|">

  ConditionalType
    = ConditionalType "is" #postWord ConditionalType "?" ConditionalType ":" ConditionalType -- conditional
    | ("if" | "unless") #postWord ConditionalType "is" #postWord ConditionalType "then" #postWord ConditionalType "else" #postWord ConditionalType -- if_then_else
    | UnionType

  MappedType
    = "{" (("+" | "-")? "readonly")? "[" identifier "in" Type
      ("as" Type)? "]" (("+" | "-")? "?")? ":" Type "}" -- mapped
    | ConditionalType

  IfType
    = MappedType ("if" | "unless") #postWord IfType "is" #postWord IfType -- if
    | MappedType

  NamespaceDeclaration = ("export" #space)? "namespace" #space identifier WrappedScriptBlock

  InterfaceDeclaration
    = ("export" #space)? "interface" #space identifier GenericTypeParameterList?
      (#space "extends" #space NonemptyListOf<Implementable, #expressionTerminator>)?
      "{" ListOf<TypeObjectEntry, #typeTerminator> "}"

  IndexSignatureType<prefix> = "readonly"? prefix "[" identifier ":" Type "]" ":" Type

  TypeDeclaration
    = ("export" #space)? "type" #space identifier GenericTypeParameterList? "=" Type #statementTerminator

  GenericTypeParameter = identifier (":" Type)? ("=" Type)?
  GenericTypeParameterList = "<" NonemptyListOf<GenericTypeParameter, #expressionTerminator> ">"

  NonemptyGenericTypeArgumentList = "<" NonemptyListOf<Type, #expressionTerminator> ">"
  GenericTypeArgumentList
    = NonemptyGenericTypeArgumentList -- with_args
    | -- empty
}
